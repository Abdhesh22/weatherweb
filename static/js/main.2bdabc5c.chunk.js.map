{"version":3,"sources":["weatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","React","useState","wetherUseState","setweatherUseState","temp","humidity","pressure","weatherMood","name","speed","country","sunset","useEffect","date","Date","timestr","getHours","getMinutes","className","toLocaleString","App","searchvalue","setsearchvalue","setTemp","getweatherinfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bdabc5c.chunk.js","sourcesContent":["import React,{useEffect} from 'react';\r\nimport './index.css'\r\nconst WeatherCard = ({tempInfo})=>{\r\n    const [wetherUseState, setweatherUseState] = React.useState();\r\n    const {  //object of new data according to user input\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weatherMood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset\r\n      } = tempInfo;\r\n      useEffect(() => {\r\n          if(weatherMood){\r\n              switch(weatherMood){\r\n                  case \"Clouds\": setweatherUseState(\"wi-day-cloudy\");\r\n                  break;\r\n                  case \"Haze\": setweatherUseState(\"wi-fog\");\r\n                  break;\r\n                  case \"Clear\": setweatherUseState(\"wi-day-sunny\");\r\n                  break;\r\n                  case \"Mist\": setweatherUseState(\"wi-dust\");\r\n                  break;\r\n                  case \"Rain\": setweatherUseState(\"wi-day-rain\");\r\n                  break;\r\n                  case \"Drizzle\": setweatherUseState(\"wi-day-showers\");\r\n                  break;\r\n                  case \"Snow\": setweatherUseState(\"wi-day-snow\");\r\n                  break;\r\n                  case \"Fog\": setweatherUseState(\"wi-day-fog\");\r\n                  break;\r\n                  default : setweatherUseState(\"wi-day-sunny\");\r\n                  break;\r\n              }\r\n          }\r\n      }, [weatherMood])\r\n      let sec = sunset;\r\n      let date = new Date(sec * 1000);\r\n      let timestr = `${date.getHours()}:${date.getMinutes()}`\r\nreturn(\r\n<>\r\n    <div className=\"widget\">\r\n    <div className=\"weatherIcon\">\r\n    <i className={`wi ${wetherUseState}`}></i>\r\n    </div>\r\n    <div className=\"weatherInfo\">\r\n      <div className=\"weatherInfo1\">\r\n      <div className=\"temperature\">\r\n        <span>{temp}&deg;</span>\r\n      </div>\r\n      <div className=\"description\">\r\n        <div className=\"weatherCondition\">{weatherMood}\r\n        <div className=\"place\">{name},{country}</div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    <div className=\"date\">{new Date().toLocaleString()}</div>\r\n    </div>\r\n    <div className=\"extra-temp\">\r\n      <div className=\"temp-info-minmax\">\r\n        <div className=\"two-sided-section\">\r\n          <p><i className={\"wi wi-sunset\"}></i></p>\r\n          <p className=\"extra-info-leftside\">\r\n                {timestr} PM<br/>\r\n                Sunset\r\n          </p>\r\n        </div>\r\n        <div className=\"two-sided-section\">\r\n          <p><i className={\"wi wi-humidity\"}></i></p>\r\n          <p className=\"extra-info-leftside\">\r\n                {humidity}<br/>\r\n                Humidity\r\n          </p>\r\n        </div>\r\n        <div className=\"two-sided-section\">\r\n          <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n          <p className=\"extra-info-leftside\">\r\n                {speed}<br/>\r\n                Speed\r\n          </p>\r\n        </div>\r\n        <div className=\"two-sided-section\">\r\n          <p><i className={\"wi wi-hail\"}></i></p>\r\n          <p className=\"extra-info-leftside\">\r\n                {pressure}<br/>\r\n                Pressure\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</>\r\n);\r\n};\r\nexport default WeatherCard;","import React, { useState,useEffect } from 'react'; \nimport WeatherCard from './weatherCard';\nconst App =()=>{\n  const [searchvalue, setsearchvalue] = useState(\"New delhi\");\n   const [tempInfo,setTemp] = useState(\"\");\n  const getweatherinfo= async ()=>{\n    try {\n        let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchvalue}&units=metric&appid=7eae17ff4f20d79bd5864aed229f75ad`;\n        const res = await fetch(url);\n        const data = await res.json();\n        // console.log(data);\n        const {temp,humidity,pressure} = data.main;\n        const {main : weatherMood} = data.weather[0];\n        const {name} = data;\n        const {speed} = data.wind;\n        const {country,sunset} = data.sys;\n\n        const myNewWeatherInfo ={  //object of new data according to user input\n          temp,\n          humidity,\n          pressure,\n          weatherMood,\n          name,\n          speed,\n          country,\n          sunset\n        };\n        setTemp(myNewWeatherInfo)\n        // console.log(temp);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getweatherinfo();\n  }, []);\n  return <>\n  <div className=\"wrap\">\n    <div className=\"search\">\n      <input type=\"search\" placeholder=\"Enter City Name\" autoFocus id=\"search\" className=\"searchTerm\" value={searchvalue} onChange={(e)=>setsearchvalue(e.target.value)}/>\n      <button className=\"SearchBtn\" onClick={getweatherinfo}>Search</button>\n    </div>\n  </div>\n  <WeatherCard tempInfo = {tempInfo}/>\n  </>;\n};\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}